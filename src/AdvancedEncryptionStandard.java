import java.util.ArrayList;

public abstract class AdvancedEncryptionStandard {

	protected String type;
	protected int Nk; // Word size
	protected int Nb; // Block size
	protected int Nr; // Total rounds
	protected ArrayList<String[][]> keys;
	protected int[] substitutionBox = { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe,
			0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72,
			0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04,
			0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c,
			0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20,
			0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33,
			0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
			0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e,
			0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde,
			0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4,
			0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba,
			0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5,
			0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69,
			0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42,
			0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
	protected int[] inverseSubstitutionBox = { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e,
			0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde,
			0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
			0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8,
			0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50,
			0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc,
			0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
			0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2,
			0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8,
			0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18,
			0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
			0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51,
			0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d,
			0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77,
			0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
	protected String[][] roundConstantTable = { { "01", "00", "00", "00" }, { "02", "00", "00", "00" },
			{ "04", "00", "00", "00" }, { "08", "00", "00", "00" }, { "10", "00", "00", "00" },
			{ "20", "00", "00", "00" }, { "40", "00", "00", "00" }, { "80", "00", "00", "00" },
			{ "1B", "00", "00", "00" }, { "36", "00", "00", "00" } };
	protected String[][] mixColumnsTable = { { "02", "03", "01", "01" }, { "01", "02", "03", "01" },
			{ "01", "01", "02", "03" }, { "03", "01", "01", "02" } };
	protected int[] mixColumnsMultiplyBy2 = { 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16,
			0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a,
			0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
			0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82,
			0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6,
			0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca,
			0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee,
			0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09,
			0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d,
			0x23, 0x21, 0x27, 0x25, 0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41,
			0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
			0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9,
			0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9, 0xdf, 0xdd,
			0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1,
			0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5 };
	protected int[] mixColumnsMultiplyBy3 = { 0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d,
			0x14, 0x17, 0x12, 0x11, 0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27,
			0x22, 0x21, 0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
			0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 0xc0, 0xc3,
			0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 0xf0, 0xf3, 0xf6, 0xf5,
			0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf,
			0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99,
			0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80,
			0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6,
			0xbf, 0xbc, 0xb9, 0xba, 0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec,
			0xe9, 0xea, 0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
			0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 0x6b, 0x68,
			0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 0x3b, 0x38, 0x3d, 0x3e,
			0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04,
			0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a };
	protected String[][] inverseMixColumnsTable = { { "0E", "0B", "0D", "09" }, { "09", "0E", "0B", "0D" },
			{ "0D", "09", "0E", "0B" }, { "0B", "0D", "09", "0E" } };
	protected int[] mixColumnsMultiplyBy9 = { 0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53,
			0x6c, 0x65, 0x7e, 0x77, 0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5,
			0xee, 0xe7, 0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c,
			0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 0x76, 0x7f,
			0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 0xe6, 0xef, 0xf4, 0xfd,
			0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60,
			0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a, 0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2,
			0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad,
			0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f,
			0x10, 0x19, 0x02, 0x0b, 0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2,
			0xa9, 0xa0, 0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30,
			0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 0x0a, 0x03,
			0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 0xa1, 0xa8, 0xb3, 0xba,
			0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c,
			0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46 };
	protected int[] mixColumnsMultiplyBy11 = { 0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45,
			0x74, 0x7f, 0x62, 0x69, 0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf,
			0xd2, 0xd9, 0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12,
			0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2, 0xf6, 0xfd,
			0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 0x46, 0x4d, 0x50, 0x5b,
			0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f, 0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa,
			0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4, 0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c,
			0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54, 0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4,
			0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e, 0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02,
			0x33, 0x38, 0x25, 0x2e, 0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3,
			0xee, 0xe5, 0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55,
			0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68, 0xb1, 0xba,
			0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 0x7a, 0x71, 0x6c, 0x67,
			0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13, 0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed,
			0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3 };
	protected int[] mixColumnsMultiplyBy13 = { 0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f,
			0x5c, 0x51, 0x46, 0x4b, 0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81,
			0x96, 0x9b, 0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0,
			0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20, 0x6d, 0x60,
			0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 0xbd, 0xb0, 0xa7, 0xaa,
			0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6, 0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef,
			0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d, 0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25,
			0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d, 0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf,
			0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91, 0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75,
			0x56, 0x5b, 0x4c, 0x41, 0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30,
			0x27, 0x2a, 0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa,
			0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc, 0x67, 0x6a,
			0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 0x0c, 0x01, 0x16, 0x1b,
			0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47, 0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5,
			0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97 };
	protected int[] mixColumnsMultiplyBy14 = { 0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62,
			0x48, 0x46, 0x54, 0x5a, 0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6,
			0xb4, 0xba, 0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81,
			0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61, 0xad, 0xa3,
			0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 0x4d, 0x43, 0x51, 0x5f,
			0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17, 0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40,
			0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c, 0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc,
			0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc, 0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f,
			0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b, 0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3,
			0xe9, 0xe7, 0xf5, 0xfb, 0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc,
			0xce, 0xc0, 0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20,
			0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6, 0x0c, 0x02,
			0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 0x37, 0x39, 0x2b, 0x25,
			0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d, 0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1,
			0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d };

	// Parameterized constructor
	public AdvancedEncryptionStandard(String key) {

		if (key.length() == 32) {
			this.Nk = 4;
			this.Nb = 4;
			this.Nr = 10;
			this.type = "128";
		}

		else if (key.length() == 48) {
			this.Nk = 6;
			this.Nb = 4;
			this.Nr = 12;
			this.type = "192";
		}

		else if (key.length() == 64) {
			this.Nk = 8;
			this.Nb = 4;
			this.Nr = 14;
			this.type = "256";
		}

		this.keys = this.keyExpansion(this.convertStringToMatrix(key, true));
	}

	// ------------------- UTILITY METHODS -------------------

	// Method to convert string to matrix
	public String[][] convertStringToMatrix(String str, boolean isKey) {
		ArrayList<String> array = new ArrayList<String>();

		for (int i = 0; i < str.length(); i += 2) {
			array.add(str.charAt(i) + "" + str.charAt(i + 1));
		}

		int rows = isKey ? array.size() / this.Nk : array.size() / 4;
		int columns = isKey ? array.size() / this.Nb : array.size() / 4;
		String[][] matrix = new String[rows][columns];

		for (int i = 0; i < matrix[0].length; i++) {

			for (int j = 0; j < matrix.length; j++) {
				matrix[j][i] = array.get(j + matrix.length * i);
			}
		}

		return matrix;
	}

	// Method to convert matrix to string
	public String convertMatrixToString(String[][] matrix) {
		String str = "";

		for (int i = 0; i < matrix[0].length; i++) {

			for (int j = 0; j < matrix.length; j++) {
				str += matrix[j][i];
			}
		}

		return str;
	}

	// Method to display plain text in line
	public void displayMatrix(String[][] matrix, boolean inLine) {

		// Display plain text in line
		if (inLine) {

			for (int i = 0; i < matrix.length; i++) {

				for (int j = 0; j < matrix[0].length; j++) {
					System.out.print(matrix[i][j] == null ? matrix[i][j] : matrix[i][j].toUpperCase());
				}
			}

			System.out.println();
		}

		// Display plain text as matrix
		else {

			for (int i = 0; i < matrix.length; i++) {

				for (int j = 0; j < matrix[0].length; j++) {
					System.out.print((matrix[i][j] == null ? matrix[i][j] : matrix[i][j].toUpperCase()) + " ");
				}

				System.out.println();
			}
		}
	}

	// Method to display all keys
	public void displayExpandedKeys() {

		for (int i = 0; i < this.keys.get(0).length; i++) {

			for (int j = 0; j < this.keys.size(); j++) {
				String[][] currentKey = this.keys.get(j);

				for (int k = 0; k < currentKey[0].length; k++) {
					System.out.print(currentKey[i][k] == null ? currentKey[i][k] : currentKey[i][k].toUpperCase());
				}

				System.out.print(" ");
			}

			System.out.println();
		}
	}

	// ----------------- KEY GENERATION METHODS -----------------

	// Method to perform rotation of array by given rotation size
	public String[] performRotation(String[] array, int factor, boolean type) {

		// Perform left rotation
		if (type == false) {

			for (int i = 0; i < factor; i++) {
				String first = array[0];
				int j;

				for (j = 0; j < array.length - 1; j++) {
					array[j] = array[j + 1];
				}

				array[j] = first;
			}
		}

		// Perform right rotation
		else {

			for (int i = 0; i < factor; i++) {
				String last = array[array.length - 1];
				int j;

				for (j = array.length - 1; j > 0; j--) {
					array[j] = array[j - 1];
				}

				array[j] = last;
			}
		}

		return array;
	}

	// Method to perform substitution of given 1D array by substitution box
	public String[] performSubstitution(String[] array) {

		for (int i = 0; i < array.length; i++) {
			array[i] = Integer.toHexString(this.substitutionBox[Integer.parseInt("" + array[i].charAt(1), 16)
					+ 16 * Integer.parseInt("" + array[i].charAt(0), 16)]);

			// If length of hex number id 1 append zero at start
			if (array[i].length() == 1) {
				array[i] = "0" + array[i];
			}
		}

		return array;
	}

	// Method to create a new key from current key
	public String[][] createNewKey(String[][] currentKey, String[] substitutedLastColumn, int currentRound) {
		String[][] newKeyMatrix = new String[currentKey.length][currentKey[0].length];

		for (int i = 0; i < newKeyMatrix[0].length; i++) {

			for (int j = 0; j < newKeyMatrix.length; j++) {

				if (i == 0) {
					newKeyMatrix[j][i] = Integer.toHexString(
							Integer.parseInt(currentKey[j][i], 16) ^ Integer.parseInt(substitutedLastColumn[j], 16)
									^ Integer.parseInt(roundConstantTable[currentRound][j], 16));
				}

				else if (this.type.equals("256") && i == 4) {
					String substitutedNewKeyMatrixValue = Integer.toHexString(
							this.substitutionBox[Integer.parseInt("" + newKeyMatrix[j][i - 1].charAt(1), 16)
									+ 16 * Integer.parseInt("" + newKeyMatrix[j][i - 1].charAt(0), 16)]);
					newKeyMatrix[j][i] = Integer.toHexString(Integer.parseInt(currentKey[j][i], 16)
							^ Integer.parseInt(substitutedNewKeyMatrixValue, 16));
				}

				else {
					newKeyMatrix[j][i] = Integer.toHexString(
							Integer.parseInt(currentKey[j][i], 16) ^ Integer.parseInt(newKeyMatrix[j][i - 1], 16));
				}

				// If length of hex number id 1 append zero at start
				if (newKeyMatrix[j][i].length() == 1) {
					newKeyMatrix[j][i] = "0" + newKeyMatrix[j][i];
				}
			}
		}

		return newKeyMatrix;
	}

	// Method to normalize keys (Needed in case of AES-192 and greater)
	public ArrayList<String[][]> normalizeKeys(ArrayList<String[][]> rawKeys) {

		// Creating empty normalized keys
		ArrayList<String[][]> normalizedKeys = new ArrayList<String[][]>();

		for (int i = 0; i < this.Nr + 1; i++) {
			normalizedKeys.add(new String[this.Nb][this.Nb]);
		}

		// Concatenating all keys (Inflating 2D matrices into 1D arrays)
		ArrayList<ArrayList<String>> allKeysConcatenation = new ArrayList<ArrayList<String>>();

		for (int i = 0; i < this.Nb; i++) {
			ArrayList<String> subArrayList = new ArrayList<String>();

			for (int j = 0; j < rawKeys.size(); j++) {
				String[][] currentKey = rawKeys.get(j);

				for (int k = 0; k < currentKey[0].length; k++) {
					subArrayList.add(currentKey[i][k]);
				}
			}

			allKeysConcatenation.add(subArrayList);
		}

		// Transforming raw keys into normalized keys
		int currentKeyRowIndex = 0;

		for (int i = 0; i < allKeysConcatenation.size(); i++) {
			int currentKeyIndex = -1;

			for (int j = 0; j < allKeysConcatenation.get(i).size(); j++) {

				if (j % 4 == 0) {
					currentKeyIndex += 1;
				}

				// Discard remaining key values
				if (currentKeyIndex < this.Nr + 1) {
					normalizedKeys.get(currentKeyIndex)[currentKeyRowIndex][j % 4] = allKeysConcatenation.get(i).get(j);
				}
			}

			currentKeyRowIndex++;
		}

		return normalizedKeys;
	}

	// Method to generate keys
	public ArrayList<String[][]> keyExpansion(String[][] initialKey) {
		ArrayList<String[][]> rawKeys = new ArrayList<String[][]>();
		rawKeys.add(initialKey);
		String[][] currentKey = initialKey;
		int numberOfKeyRounds = (int) Math.ceil(((this.Nb * (this.Nr + 1)) / (double) this.Nk) - 1);

		for (int i = 0; i < numberOfKeyRounds; i++) {

			// Getting last column of key
			String[] lastColumn = new String[currentKey.length];

			for (int j = 0; j < currentKey.length; j++) {
				lastColumn[j] = currentKey[j][currentKey[0].length - 1];
			}

			// Perform rotation of last column
			String[] rotatedLastColumn = this.performRotation(lastColumn, 1, false);

			// Perform substitution of last column of key
			String[] substitutedLastColumn = this.performSubstitution(rotatedLastColumn);

			// Generating new key from current key
			String[][] newKey = this.createNewKey(currentKey, substitutedLastColumn, i);
			rawKeys.add(newKey);

			// Making new key as current key
			currentKey = newKey;
		}

		return this.normalizeKeys(rawKeys);
	}

	// ----------------------- ENCRYPTION/DECRYPTION METHODS -----------------------

	// Method to perform add round key
	public String[][] performAddRoundKey(String[][] matrix, int currentRound) {

		for (int i = 0; i < matrix.length; i++) {

			for (int j = 0; j < matrix[0].length; j++) {

				matrix[i][j] = Integer.toHexString(
						Integer.parseInt(matrix[i][j], 16) ^ Integer.parseInt(this.keys.get(currentRound)[i][j], 16));

				// If length of hex number id 1 append zero at start
				if (matrix[i][j].length() == 1) {
					matrix[i][j] = "0" + matrix[i][j];
				}
			}
		}

		return matrix;
	}

	// Method to perform substitution of given 2D array by substitution box
	public String[][] performSubstitution(String[][] matrix, boolean isInverse) {
		int[] lookupTable = isInverse ? this.inverseSubstitutionBox : this.substitutionBox; // Setting up lookup table

		for (int i = 0; i < matrix.length; i++) {

			for (int j = 0; j < matrix[0].length; j++) {
				matrix[i][j] = Integer.toHexString(lookupTable[Integer.parseInt("" + matrix[i][j].charAt(1), 16)
						+ 16 * Integer.parseInt("" + matrix[i][j].charAt(0), 16)]);

				// If length of hex number id 1 append zero at start
				if (matrix[i][j].length() == 1) {
					matrix[i][j] = "0" + matrix[i][j];
				}
			}
		}

		return matrix;
	}

	// Method to perform shift rows
	public String[][] performShiftRows(String[][] matrix, boolean isInverse) {

		for (int i = 0; i < matrix.length; i++) {
			String[] currentRow = new String[matrix[0].length];

			for (int j = 0; j < matrix[0].length; j++) {
				currentRow[j] = matrix[i][j];
			}

			currentRow = this.performRotation(currentRow, i, isInverse);

			for (int j = 0; j < matrix[0].length; j++) {
				matrix[i][j] = currentRow[j];

				// If length of hex number id 1 append zero at start
				if (matrix[i][j].length() == 1) {
					matrix[i][j] = "0" + matrix[i][j];
				}
			}
		}

		return matrix;
	}

	// Method to perform multiplication in galious field GF(2^8) by lookup tables
	public String[][] galiousMultiplication(String[][] matrix, boolean isInverse) {
		String[][] lookupTable = isInverse ? this.inverseMixColumnsTable : this.mixColumnsTable; // Setting look up
																									// table
		String[][] resultantMatrix = new String[lookupTable.length][matrix[0].length];

		for (int i = 0; i < lookupTable.length; i++) {

			for (int j = 0; j < matrix[0].length; j++) {
				resultantMatrix[i][j] = "00";

				for (int k = 0; k < matrix.length; k++) {

					if (lookupTable[i][k] == "01") {
						resultantMatrix[i][j] = Integer.toHexString(
								Integer.parseInt(resultantMatrix[i][j], 16) ^ Integer.parseInt(matrix[k][j], 16));
					}

					else if (lookupTable[i][k] == "02") {
						resultantMatrix[i][j] = Integer.toHexString(Integer.parseInt(resultantMatrix[i][j], 16)
								^ this.mixColumnsMultiplyBy2[Integer.parseInt("" + matrix[k][j].charAt(1), 16)
										+ 16 * Integer.parseInt("" + matrix[k][j].charAt(0), 16)]);
					}

					else if (lookupTable[i][k] == "03") {
						resultantMatrix[i][j] = Integer.toHexString(Integer.parseInt(resultantMatrix[i][j], 16)
								^ this.mixColumnsMultiplyBy3[Integer.parseInt("" + matrix[k][j].charAt(1), 16)
										+ 16 * Integer.parseInt("" + matrix[k][j].charAt(0), 16)]);
					}

					else if (lookupTable[i][k] == "09") {
						resultantMatrix[i][j] = Integer.toHexString(Integer.parseInt(resultantMatrix[i][j], 16)
								^ this.mixColumnsMultiplyBy9[Integer.parseInt("" + matrix[k][j].charAt(1), 16)
										+ 16 * Integer.parseInt("" + matrix[k][j].charAt(0), 16)]);
					}

					else if (lookupTable[i][k] == "0B") {
						resultantMatrix[i][j] = Integer.toHexString(Integer.parseInt(resultantMatrix[i][j], 16)
								^ this.mixColumnsMultiplyBy11[Integer.parseInt("" + matrix[k][j].charAt(1), 16)
										+ 16 * Integer.parseInt("" + matrix[k][j].charAt(0), 16)]);
					}

					else if (lookupTable[i][k] == "0D") {
						resultantMatrix[i][j] = Integer.toHexString(Integer.parseInt(resultantMatrix[i][j], 16)
								^ this.mixColumnsMultiplyBy13[Integer.parseInt("" + matrix[k][j].charAt(1), 16)
										+ 16 * Integer.parseInt("" + matrix[k][j].charAt(0), 16)]);
					}

					else if (lookupTable[i][k] == "0E") {
						resultantMatrix[i][j] = Integer.toHexString(Integer.parseInt(resultantMatrix[i][j], 16)
								^ this.mixColumnsMultiplyBy14[Integer.parseInt("" + matrix[k][j].charAt(1), 16)
										+ 16 * Integer.parseInt("" + matrix[k][j].charAt(0), 16)]);
					}
				}
			}
		}

		return resultantMatrix;
	}

	// Method to perform mix columns
	public String[][] performMixColumns(String[][] matrix, boolean isInverse) {

		for (int i = 0; i < matrix[0].length; i++) {
			String[][] currentColumn = new String[matrix.length][1];

			for (int j = 0; j < matrix.length; j++) {
				currentColumn[j][0] = matrix[j][i];
			}

			currentColumn = this.galiousMultiplication(currentColumn, isInverse);

			for (int j = 0; j < matrix.length; j++) {
				matrix[j][i] = currentColumn[j][0];

				// If length of hex number id 1 append zero at start
				if (matrix[j][i].length() == 1) {
					matrix[j][i] = "0" + matrix[j][i];
				}
			}
		}

		return matrix;
	}

	// Method to encrypt plain text
	public String encrypt(String plainText) {

		// Setting plain text as plain text hex matrix
		String[][] plainTextMatrix = this.convertStringToMatrix(plainText, false);

		// Starting AES encryption
		plainTextMatrix = this.performAddRoundKey(plainTextMatrix, 0);
//		System.out.println("\nAfter addRoundKey(0):");
//		this.displayMatrix(plainTextMatrix, true);

		int i;

		for (i = 1; i < this.Nr; i++) {
			plainTextMatrix = this.performSubstitution(plainTextMatrix, false);
//			System.out.println("After subBytes:");
//			this.displayMatrix(plainTextMatrix, true);

			plainTextMatrix = this.performShiftRows(plainTextMatrix, false);
//			System.out.println("After shiftRows:");
//			this.displayMatrix(plainTextMatrix, true);

			plainTextMatrix = this.performMixColumns(plainTextMatrix, false);
//			System.out.println("After mixColumns:");
//			this.displayMatrix(plainTextMatrix, true);

			plainTextMatrix = this.performAddRoundKey(plainTextMatrix, i);
//			System.out.println("After addRoundKey(" + i + "):");
//			this.displayMatrix(plainTextMatrix, true);
		}

		plainTextMatrix = this.performSubstitution(plainTextMatrix, false);
//		System.out.println("After subBytes:");
//		this.displayMatrix(plainTextMatrix, true);

		plainTextMatrix = this.performShiftRows(plainTextMatrix, false);
//		System.out.println("After shiftRows:");
//		this.displayMatrix(plainTextMatrix, true);

		plainTextMatrix = this.performAddRoundKey(plainTextMatrix, i);
//		System.out.println("After addRoundKey(" + i + "):");
//		this.displayMatrix(plainTextMatrix, true);

		// Returning cipher text from plain text matrix (Encrypted)
		return this.convertMatrixToString(plainTextMatrix);
	}

	// Method to decrypt cipher text
	public String decrypt(String cipherText) {

		// Setting cipher text as cipher text hex matrix
		String[][] cipherTextMatrix = this.convertStringToMatrix(cipherText, false);

		// Starting AES decryption
		cipherTextMatrix = this.performAddRoundKey(cipherTextMatrix, this.Nr);
//		System.out.println("\nAfter addRoundKey(" + this.Nr + "):");
//		this.displayMatrix(cipherTextMatrix, true);

		cipherTextMatrix = this.performShiftRows(cipherTextMatrix, true);
//		System.out.println("After invShiftRows:");
//		this.displayMatrix(cipherTextMatrix, true);

		cipherTextMatrix = this.performSubstitution(cipherTextMatrix, true);
//		System.out.println("After invSubBytes:");
//		this.displayMatrix(cipherTextMatrix, true);

		int i;

		for (i = this.Nr - 1; i > 0; i--) {
			cipherTextMatrix = this.performAddRoundKey(cipherTextMatrix, i);
//			System.out.println("After addRoundKey(" + i + "):");
//			this.displayMatrix(cipherTextMatrix, true);

			cipherTextMatrix = this.performMixColumns(cipherTextMatrix, true);
//			System.out.println("After invMixColumns:");
//			this.displayMatrix(cipherTextMatrix, true);

			cipherTextMatrix = this.performShiftRows(cipherTextMatrix, true);
//			System.out.println("After invShiftRows:");
//			this.displayMatrix(cipherTextMatrix, true);

			cipherTextMatrix = this.performSubstitution(cipherTextMatrix, true);
//			System.out.println("After invSubBytes:");
//			this.displayMatrix(cipherTextMatrix, true);
		}

		cipherTextMatrix = this.performAddRoundKey(cipherTextMatrix, i);
//		System.out.println("After addRoundKey(" + i + "):");
//		this.displayMatrix(cipherTextMatrix, true);

		// Returning plain text from cipher text matrix (Decrypted)
		return this.convertMatrixToString(cipherTextMatrix);
	}
}